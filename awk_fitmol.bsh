#!/bin/bash
# A bash script for calculating RMSD between reference and calculate structure

############################################################################
#                     Author : Written by Yujie Liu                        #
#                        Email : 1051690424@qq.com                         #
#                             Version : 1.2                                #
#                           Date : 2020.06.05                              #
############################################################################

#=========================HELP INFORMATION==============================#
Usage() {
    echo "
    Usage: $0 Options
        -h    Show help information
        -i    Input, .xyz or .gro file, including many frames structure, the first is reference structure,
              other is calculate structure (default: fit.xyz)
        -m    Bool[y/n], whether use mass weighted (default: y)
        -o    Output, RMSD vs. Frames data (default: RMSD_T.dat)
    "
}

#+++++++++++++++++++++++++++DEFAULT PARAMETERS+++++++++++++++++++++++++#
inputfile="fit.xyz"
isMass="y"
outfile="RMSD_T.dat"

[[ $# -lt 1 ]] && { Usage; exit 1; }
options=($@); N=${#options[@]}
for((i = 0; i < N; i++));do
    arg=${options[$i]}; j=$((i+1))
    [[ $arg =~ -h ]] && { Usage; exit 2; }
    [[ $arg =~ -i ]]  && { inputfile=${options[$j]}; }
    [[ $arg =~ -m ]]  && { isMass=${options[$j]}; }
    [[ $arg =~ -o ]]  && { outfile=${options[$j]}; }
done

awk '
    BEGIN {
        RS = "\r?\n"
        inputfile = "'$inputfile'"; isMass = "'$isMass'";outfile = "'$outfile'";
        XX = 0; YY = 1; ZZ = 2; DIM = 3
        
        CheckFile(inputfile)
        if(inputfile~/.xyz/) {
            getline < inputfile; natoms = $0+0
            getline < inputfile; Tips = $0
            for(i = 0; i < natoms; i++) {
                getline < inputfile;
                Satom[i] = $1; w_rls[i]= _Mass(Satom[i]);
                if(isMass == "n" || isMass == "N") {w_rls[i] = 1.0}
                xp[i, XX] = $2+0; xp[i, YY] = $3+0; xp[i, ZZ] = $4+0;
            }
        }
        else if(inputfile~/.gro/) {
            getline < inputfile; Tips = $0
            getline < inputfile; natoms = $0+0
            for(i = 0; i < natoms; i++) {
                getline < inputfile;
                Satom[i] = substr($0, 11, 5); w_rls[i]= _Mass(Satom[i]);
                if(isMass == "n" || isMass == "N") {w_rls[i] = 1.0}
                xp[i, XX] = substr($0, 21, 8)+0; xp[i, YY] = substr($0, 29, 8)+0; 
                xp[i, ZZ] = substr($0, 37, 8)+0;
            }
            getline < inputfile;
        }

        
        Print_parameters()
        printf("%8s %16s\n", "# Frame", inputfile~/.xyz/? "RMSD(Angstrom)" : "RMSD(nm)") > outfile
        
        frame = 0;
        if(inputfile~/.xyz/) {
            while(getline < inputfile>0 && NF>0) {
                natoms1 = $0+0; getline < inputfile
                for(i = 0; i < natoms1; i++) {
                    getline < inputfile;
                    Satom1[i] = $1;  x[i, XX] = $2+0;
                    x[i, YY] = $3+0; x[i, ZZ] = $4+0; 
                }
                
                CheckSatom(Satom, Satom1)
                
                ifit = natoms; for(i =0; i < natoms; i++) {
                    ind_fit[i] = i;
                    xptem[i, XX] = xp[i, XX];xptem[i, YY] = xp[i, YY];xptem[i, ZZ] = xp[i, ZZ];
                }
                reset_x_ndim(3, ifit, ind_fit, natoms, xptem, w_rls);
                reset_x_ndim(3, ifit, ind_fit, natoms, x, w_rls);
                do_fit_ndim(3, natoms, w_rls, xptem, x);
                rls = calc_similar_ind(ifit, ind_fit, w_rls, x, xptem);
                printf("%8d %16.6f\n", ++frame, rls) >> outfile
            }
        }
        else if(inputfile~/.gro/) {
            while(getline < inputfile>0 && NF>0) {
                getline < inputfile; natoms1 = $0+0; 
                for(i = 0; i < natoms1; i++) {
                    getline < inputfile;
                    Satom1[i] = substr($0, 11, 5);  x[i, XX] = substr($0, 21, 8)+0;
                    x[i, YY] = substr($0, 29, 8)+0; x[i, ZZ] = substr($0, 37, 8)+0; 
                }
                getline < inputfile;
                
                CheckSatom(Satom, Satom1)
                
                ifit = natoms; for(i =0; i < natoms; i++) {
                    ind_fit[i] = i;
                    xptem[i, XX] = xp[i, XX];xptem[i, YY] = xp[i, YY];xptem[i, ZZ] = xp[i, ZZ];
                }
                reset_x_ndim(3, ifit, ind_fit, natoms, xptem, w_rls);
                reset_x_ndim(3, ifit, ind_fit, natoms, x, w_rls);
                do_fit_ndim(3, natoms, w_rls, xptem, x);
                rls = calc_similar_ind(ifit, ind_fit, w_rls, x, xptem);
                printf("%8d %16.6f\n", ++frame, rls) >> outfile
            }
        }
        
        print "\n>>>"outfile, "has been generated successfully!"
        close(inputfile); close(outfile)
    }
    
    function Print_parameters() {
        printf("\n>>>Fitting molecule file:     %s\n", inputfile);
        printf("\n>>>The number of atom is:     %d\n", natoms);
        printf("\n>>>Whether use mass weighted: %s\n", isMass);
    }
    
    function CheckFile(filename) {
        if(getline < filename < 0) {
            printf("\nError! Not found inputfile (%s)\n", filename)
            exit 1
        }
        close(filename)
    }
    
    function CheckSatom(a, b) {
        la = length(a); lb = length(b)
        if(la != lb) {
            printf("\nERROR! The number of atom (%d <--> %d) is mismatched between reference and second structure\n",
                la, lb)
            exit 1
        }
        for(i = 0; i < la; i++) {
            if(a[i] != b[i]) {
                printf("\nERROR! The element (%s <--> %s) is mismatched between reference and second structure\n",
                       a[i], b[i])
                exit 1
            }
        }
    }
    
    function _Mass(Symbol) {
        gsub(" ", "", Symbol)
        if(Symbol~/^H/) {return 1.0}
        else if(Symbol~/^C/) {return 12.01100}
        else if(Symbol~/^O/) {return 15.99940}
        else if(Symbol~/^N/) {return 14.00670}
        else if(Symbol~/^S/) {return 32.06000}
        else {
            printf("ERROR! Not found the Mass for (%s) element\n", Symbol);
            exit 1;
        }
    }
    
    function do_rotate(a, i, j, k, l, tau, s, _ARGVEND_, g, h) {
        g = a[i, j];
        h = a[k, l];
        a[i, j] = g - s * (h + g * tau);
        a[k, l] = h + s * (g - h * tau);
    }
    
    function abs(a) {
        return (a > 0? a : -a)
    }
    
    function jacobi(a, n, d, v, nrot, _ARGVEND_, b, z) {
        for(ip = 0; ip < n; ip++) {
            for(iq = 0; iq < n; iq++) {
                v[ip, iq] = 0.0;
            }
            v[ip, ip] = 1.0;
        }
        for (ip = 0; ip < n; ip++) {
            b[ip] = d[ip] = a[ip, ip];
            z[ip] = 0.0;
        }
        nrot[0] = 0;
        
        for(i = 1; i <= 50; i++) {
            sm = 0.0;
            for (ip = 0; ip < n-1; ip++)
            {
                for (iq = ip+1; iq < n; iq++) {
                    sm += abs(a[ip, iq]);
                }
            }
            if (sm == 0.0) {
                delete z;
                delete b;
                return;
            }
            if (i < 4) {
                tresh = 0.2*sm/(n*n);
            }
            else {
                tresh = 0.0;
            }
            for (ip = 0; ip < n-1; ip++) {
                for (iq = ip+1; iq < n; iq++) {
                    g = 100.0*abs(a[ip, iq]);
                    if (i > 4 && abs(d[ip])+g == abs(d[ip])\
                            && abs(d[iq])+g == abs(d[iq])) {
                        a[ip, iq] = 0.0;
                    }
                    else if (abs(a[ip, iq]) > tresh) {
                        h = d[iq]-d[ip];
                        if (abs(h)+g == abs(h)) {
                            t = (a[ip, iq])/h;
                        }
                        else {
                            theta = 0.5*h/(a[ip, iq]);
                            t     = 1.0/(abs(theta)+sqrt(1.0+theta*theta));
                            if (theta < 0.0) {
                                t = -t;
                            }
                        }
                        c         = 1.0/sqrt(1+t*t);
                        s         = t*c;
                        tau       = s/(1.0+c);
                        h         = t*a[ip, iq];
                        z[ip]    -= h;
                        z[iq]    += h;
                        d[ip]    -= h;
                        d[iq]    += h;
                        a[ip, iq] = 0.0;
                        for (j = 0; j < ip; j++) {
                            do_rotate(a, j, ip, j, iq, tau, s);
                        }
                        for (j = ip+1; j < iq; j++) {
                            do_rotate(a, ip, j, j, iq, tau, s);
                        }
                        for (j = iq+1; j < n; j++) {
                            do_rotate(a, ip, j, iq, j, tau, s);
                        }
                        for (j = 0; j < n; j++) {
                            do_rotate(v, j, ip, j, iq, tau, s);
                        }
                        ++nrot[0];
                    }
                }
            }
            for (ip = 0; ip < n; ip++) {
                b[ip] +=  z[ip];
                d[ip]  =  b[ip];
                z[ip]  =  0.0;
            }
        }
    }
    
    function calc_fit_R(ndim, natoms, w_rls, xp, x, R, _ARGVEND_, \
                        xpc, xnr, u, omega, om, d, vh, vk, irot) {
        if(ndim != 3 && ndim != 2) {
            printf("calc_fit_R called with ndim=%d instead of 3 or 2\n", ndim);
            exit 1;
        }
        
        for(n = 0; n < natoms; n++) {
            if((mn = w_rls[n]) != 0.0 ) {
                for(c = 0; c < ndim; c++) {
                    xpc = xp[n, c];
                    for(r = 0; r < ndim; r++) {
                        xnr = x[n, r];
                        u[c, r] += mn*xnr*xpc;
                    }
                }
            }
        }
        
        for(r = 0; r < 2*ndim; r++) {
            for(c = 0; c <= r; c++) {
                if(r >= ndim && c < ndim) {
                    omega[r, c] = u[r-ndim, c];
                    omega[c, r] = u[r-ndim, c];
                }
                else {
                    omega[r, c] = 0;
                    omega[c, r] = 0;
                }
            }
        }
        
        jacobi(omega, 2*ndim, d, om, irot);
        
        ndx = 0
        
        for(j = 0; j < ndim-1; j++) {
            max_d = -1000;
            for(i = 0; i < 2*ndim; i++)
            {
                if(d[i] > max_d)
                {
                    max_d = d[i];
                    ndx = i;
                }
            }
            d[ndx] = -10000;
            for(i = 0; i < ndim; i++)
            {
                vh[j, i] = sqrt(2.0)*om[i, ndx];
                vk[j, i] = sqrt(2.0)*om[i+ndim, ndx];
            }
        }
        
        if(ndim == 3) {
            cprod(vh, vh, vh);
            cprod(vk, vk, vk);
        }
        else if(ndim == 2) {
            vh[1, XX] = -vh[0, YY];
            vh[1, YY] =  vh[0, XX];
            vk[1, XX] = -vk[0, YY];
            vk[1, YY] =  vk[0, XX];
        }
        
        for (r = 0; r < ndim; r++) {
            for (c = 0; c < ndim; c++) {
                for (s = 0; s < ndim; s++) {
                    R[r, c] += vk[s, r]*vh[s, c];
                }
            }
        }
        for (r = ndim; r < DIM; r++) {R[r, r] = 1;}
    }
    
    function cprod(a, b, c) {
        c[2, XX] = a[0, YY]*b[1, ZZ]-a[0, ZZ]*b[1, YY];
        c[2, YY] = a[0, ZZ]*b[1, XX]-a[0, XX]*b[1, ZZ];
        c[2, ZZ] = a[0, XX]*b[1, YY]-a[0, YY]*b[1, XX];
    }
    
    function do_fit_ndim(ndim, natoms, w_rls, xp, x, _ARGVEND_, R, x_old) {
        calc_fit_R(ndim, natoms, w_rls, xp, x, R);
        for (j = 0; j < natoms; j++) {
            for (m = 0; m < DIM; m++) {
                x_old[m] = x[j, m];
            }
            for (r = 0; r < DIM; r++) {
                x[j, r] = 0;
                for (c = 0; c < DIM; c++) {
                    x[j, r] += R[r, c]*x_old[c];
                }
            }
        }
    }
    
    function rvec_dec(a, i, b, _ARGVEND_, x, y, z) {
        x = a[i, XX]-b[XX];
        y = a[i, YY]-b[YY];
        z = a[i, ZZ]-b[ZZ];
        a[i, XX] = x;
        a[i, YY] = y;
        a[i, ZZ] = z;
    }
    
    function reset_x_ndim(ndim, ncm, ind_cm, nreset, x, mass) {
        tm = 0.0;
        for(i = 0; i < ncm; i++) {
            ai = ind_cm[i];
            mm = mass[ai];
            for(m = 0; m < ndim; m++) {
                xcm[m] += mm*x[ai, m];
            }
            tm += mm;
        }
        for(m = 0; m < ndim; m++) {xcm[m] /= tm;}
        for(i = 0; i < nreset; i++){
            rvec_dec(x, i, xcm);
        }
    }
    
    
    function calc_similar_ind(nind, index1, mass, x, xp, _ARGVEND_, d) {
        tm = 0;
        rd = 0;
        for (j = 0; j < nind; j++) {
            if (length(index1)!=0) {
                i = index1[j];
            }
            else {
                i = j;
            }
            m   = mass[i];
            tm += m;
            for (d = 0; d < DIM; d++)
            {
                xd  = x[i, d] - xp[i, d];
                rd += m * xd^2;
            }
        }
        return sqrt(rd/tm);
    }
'