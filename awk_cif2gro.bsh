#!/bin/bash

awk '
    BEGIN {n = 1; n1 = m1 = 1}

    /_cell_length_a/ {txt = $NF; sub(/\(.*\)/, "", txt); a = txt+0}
    /_cell_length_b/ {txt = $NF; sub(/\(.*\)/, "", txt); b = txt+0}
    /_cell_length_c/ {txt = $NF; sub(/\(.*\)/, "", txt); c = txt+0}
    /_cell_angle_alpha/ {txt = $NF; sub(/\(.*\)/, "", txt); ax = txt+0; if(ax != 90) {Print_Error(ax); exit 1}}
    /_cell_angle_beta/  {txt = $NF; sub(/\(.*\)/, "", txt); ay = txt+0; if(ay != 90) {Print_Error(ay); exit 1}}
    /_cell_angle_gamma/ {txt = $NF; sub(/\(.*\)/, "", txt); az = txt+0; if(az != 90) {Print_Error(az); exit 1}}

    /_atom_site_occupancy/ {
        while(getline && ($0!~/loop_/)) {
            Satom[n] = $1;
            Xatom[$1] = $3 > 0? $3*a : $3*a+a;
            Yatom[$1] = $4 > 0? $4*b : $4*b+b;
            Zatom[$1] = $5 > 0? $5*c : $5*b+c;
            n++
        }
    }

    /_geom_bond_site_symmetry_2/ {
        while(getline>0) {
            if($1!~/H/) {List[$1] = $2"_"List[$1]}
        }
    }

    END {
        print "MOL  Created by", "'$0'"
        print n-1
        for(i = 1; i <= n-1; i++) {
            for(j in List) {
                if(Satom[i] == j) {
                    if(Satom[i]~/O/) {
                        printf("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", m1, "SOL", "OW",\
                            (n1++)%1E6, Xatom[j]/10, Yatom[j]/10, Zatom[j]/10)
                        YesO = 1
                    }
                    else if(Satom[i]~/C/) {
                        printf("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", m1, "CH4", "C",\
                            (n1++)%1E6, Xatom[j]/10, Yatom[j]/10, Zatom[j]/10)
                    }

                    t = split(List[j], temp, "_")
                    for(k = 1; k < t; k++) {
                        printf("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", m1, YesO == 1? "SOL" : "CH4",\
                                YesO == 1? "HW" : "H", (n1++)%1E6, Xatom[temp[k]]/10,Yatom[temp[k]]/10, Zatom[temp[k]]/10)
                    }
                    m1++; YesO = 0
                }
            }
        }
        printf("%12.6f %12.6f %12.6f\n", a/10, b/10, c/10)
    }

    function Print_Error(angle) {
        printf("\nError! Unsupported unitcell angle %f degree.\n", angle)
        exit 1
    }

' $1 > mol.gro
